/*
Quando temos um objeto e manipulamos seus atributos, adicionando, atualizando ou removendo-os, estamos
apenas modificando-o, mas, em ess√™ncia, o objeto continua o mesmo, ou seja a sua refer√™ncia de mem√≥ria √© a
mesma.
Num projeto que voc√™ est√° trabalhando, voc√™ foi designado a refatorar diversas fun√ß√µes para que fa√ßam
c√≥pias de objetos e manipulem os dados dessas c√≥pias, com o intuito de evitar efeitos indesej√°veis em
algumas situa√ß√µes devido a refer√™ncias a objetos. Abaixo, est√° a descri√ß√£o de uma dessas fun√ß√µes.

Voc√™ escrever√° uma fun√ß√£o que recebe um objeto como primeiro par√¢metro e, como segundo par√¢metro, o
nome de uma propriedade contida nesse objeto. Em seguida, retorne uma c√≥pia desse objeto sem a
propriedade especificada no segundo par√¢metro.
Exerc√≠cios - Curso Fundamentos de Programa√ß√£o 3
Exemplos:
removerPropriedade({a: 1, b: 2}, "a") // retornar√° {b: 2}
removerPropriedade({
id: 20,
nome: "caneta",
descricao: "N√£o preenchido"
}, "descricao") // retornar√° {id: 20, nome: "caneta"}
üí° A fim de testar se o objeto retornado n√£o √© o mesmo que foi passado como par√¢metro para a fun√ß√£o
removerPropriedade, voc√™ poder√° usar a fun√ß√£o Object.is(), por exemplo:
Object.is(removerPropriedade(objeto, "descricao"), objeto)
Retornar√° false se o objeto n√£o for o mesmo.
*/


const object = {propriedade1:10, propriedade2:20, propriedade3:30, propriedade4:40}

function removeProperty (object, property) {

    const novoObject = {}


    for (const objProperty in object) {


        if(objProperty != property) {

            
            novoObject[`${objProperty.toString()}`] = object[objProperty]  
            
        }
    }
    return novoObject
}


//removeProperty(object, "propriedade1")
console.log(Object.is(removeProperty(object, "propriedade1"), object))